<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Arch Linux Installation</title>
    <link href="/2022/07/04/Arch-Linux-Installation/"/>
    <url>/2022/07/04/Arch-Linux-Installation/</url>
    
    <content type="html"><![CDATA[<p>Arch Linux 双系统安装指南</p><span id="more"></span><blockquote><p>本文从 2022 年 3 月 25 日开始编写，随着时间的推移，部分内容可能需要修改。请注意辨别！</p></blockquote><p>本文的目的是让一个<strong>没有任何 Linux 基础的小白</strong>照着这篇文章一台在一台<strong>已安装 Windows 的 UEFI 引导的 x86_64 的计算机上安装上 Arch Linux 和 Windows 双系统并使其处于基本可用的状态</strong>。所以，和 Arch Wiki 的不同，本文追求<strong>让用户照着文档敲指令就能装好</strong>。所以，本文的语言会有些啰嗦，有经验的用户可以按照<strong>省流助手</strong>的提示进行操作</p><p>安装 Arch Linux 可能需要几十分钟，甚至数个小时的时间（视熟练水平和网速而定，目前世界纪录是 1 分 14 秒，普通人需要大概半小时的时间）。请为自己留好充足的时间</p><blockquote><p>用户在安装过程中产生的任何数据、财产损失都与我（即本文作者无关！）</p></blockquote><h1 id="Before-Installation"><a href="#Before-Installation" class="headerlink" title="Before Installation"></a>Before Installation</h1><p>这部分的内容较为枯燥，但是<strong>强烈建议</strong>将其读完！</p><h2 id="我需要做什么？"><a href="#我需要做什么？" class="headerlink" title="我需要做什么？"></a>我需要做什么？</h2><ul><li><p><strong>你需要对 Linux，或者说计算机科学感兴趣</strong><br>（要是没兴趣也不会来看这篇文章了吧 XD）</p></li><li><p><strong>你需要解决问题和学习的能力</strong><br>使用 Linux，不可避免的会遇到大量的、意料之外的问题。解决问题的能力就格外重要。<br>此处推荐一本书 <a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way">提问的智慧</a><br>我想说：使用搜索引擎、描述问题都是极为重要的能力。使用 Linux 的过程就是不断地解决问题的能力。你所学到的远不只是 Linux。</p></li><li><p><strong>你需要阅读一些英语文档的能力</strong><br>互联网是全世界的。中文文档的数量是有限的。当你遇到问题需要解决时，常常会遇到英语的内容。所以，阅读英语文档的能力是必须的。（当然，使用翻译工具也是种办法。不过，专业的名词的识别率一般较低，所以并不推荐）</p></li><li><p><strong>一个 U 盘</strong><br>U 盘里可以安装<a href="">Ventoy</a>，其允许你将多个 ISO 和文件共存，我建议在这个 U 盘里放置：一个 PE，一个 Linux Live CD（带桌面环境的最好）这样，当你把电脑折腾坏了，你还可以通过 U 盘来尝试拯救你的电脑。</p></li></ul><h2 id="牛逼，开整！"><a href="#牛逼，开整！" class="headerlink" title="牛逼，开整！"></a>牛逼，开整！</h2><p>来，给他整个活！<br>走，忽略！</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>在这一章节，你将学到：</p><ol><li>使用正确的网站下载最新的 Arch Linux 的 ISO</li><li>什么是镜像站</li><li>如何将 U 盘制作成一个启动盘</li><li>如何把 Linux Live CD 通过 U 盘启动</li></ol><blockquote><p>省流助手：去<a href="https://mirrors.sjtug.sjtu.edu.cn/archlinux/iso/latest/">上交大镜像站</a>下载最新的 ISO，然后刻录进 U 盘，再通过 U 盘启动</p></blockquote><h2 id="获取-ISO"><a href="#获取-ISO" class="headerlink" title="获取 ISO"></a>获取 ISO</h2><p>首先，你需要下载 Arch Linux 的 ISO（安装镜像）如果你曾经安装过 Windows，那你对 ISO 肯定不会陌生。此处不多介绍。</p><p>Arch Linux 是一个滚动发行版，因此，每个月都会发布一个新的 ISO,请务必要根据这篇文章下载<strong>最新的 ISO</strong>！</p><p>首先，Arch Linux 的官方下载地址是在<a href="https://archlinux.org/download/">这里</a>。你可以尝试通过这个链接下载。不过，由于地理位置的原因，速度极慢。</p><p>所以，为了解决这一问题，人们提出了镜像站的概念——即，将某一个仓库作为上游，镜像站每隔一段时间将其同步至自己的服务器，使用户获得更好的使用体验。<br>我将使用<a href="https://mirrors.sjtug.sjtu.edu.cn/">上海交通大学的镜像站</a>来进行演示。当然，你也可以选择别的镜像站，比如<a href="https://mirrors.tuna.tsinghua.edu.cn/">清华 TUNA</a>或者<a href="https://mirrors.ustc.edu.cn/">中科大 USTC</a>。不过，我感觉上交大的镜像站体验最好，速度最快。</p><p>所以，在浏览器中打开<a href="https://mirrors.sjtug.sjtu.edu.cn/archlinux/iso/latest">下载地址</a>后，应该看到这样的画面：</p><p><img src="/images/Arch-Linux-Installation/sjtug_iso.png" alt="sjtug_iso"></p><p>直接点击那个最大的 ISO,然后就开始下载了。</p><blockquote><p>课后习题（雾）：为什么我打开同样的链接，却看到了<code>archlinux-2022.04.01-x86_64.iso</code>或<code>archlinux-2022.05.01-x86_64.iso</code>呢？<br>如果无法找到答案，可以尝试搜索，或重新阅读本文章</p></blockquote><h2 id="刻录进-U-盘"><a href="#刻录进-U-盘" class="headerlink" title="刻录进 U 盘"></a>刻录进 U 盘</h2><p>刻录进 U 盘的方案有很多，此处推荐一个我最近使用的——<a href="https://www.ventoy.net/cn/index.html">Ventoy</a>。此处使用<a href="https://mirrors.sdu.edu.cn/">山东大学镜像站</a>来下载这一工具。</p><p>在浏览器中打开<a href="https://mirrors.sdu.edu.cn/github-release/ventoy_Ventoy/">山东大学镜像站提供的下载链接</a>，你应该看到如下的画面：<br><img src="/images/Arch-Linux-Installation/sdu_ventoy.png" alt="你猜">点进去，然后找到 Windows 版的 zip,下载。下载好后，解压，按照提示，给你的 U 盘安装上<code>Ventoy</code>，这一步骤较为简单，不再赘述</p><blockquote><p>如果你这一步都完成不了的话，放弃吧，Linux 不适合你。</p></blockquote><p>在 Ventoy 安装成功后，你就可以往 U 盘里放 Arch Linux 的 ISO 了。这一步就算完成啦！</p><blockquote><p>你可以选择使用一些<code>old school</code>的方式来获得更好的稳定性，比如<code>Rufus</code>等传统的刻录工具。不过，我并不建议这种办法。</p></blockquote><p>好了！到这一步就已经做好大多数的准备工作了……吗？你还需要给你的硬盘分区。</p><blockquote><p>你只需要分配一个分区用于存放整个系统便可以了（个人建议，大于 50G 就可以了！）</p></blockquote><p>我建议你在 Windows 上就做好这一工作。具体方法请自行搜索并按照自己的需求和实际情况操作。</p><p>好了，差不多可以了！现在，关闭你的电脑吧！然后，再把它打开。在开机时，狂按你的电脑的开机启动项键。对于不同品牌的笔记本和台式机来说，开机启动项应该是：<br><img src="/images/Arch-Linux-Installation/boot_1.png" alt="boot_1"><br><img src="/images/Arch-Linux-Installation/boot_2.png" alt="boot_2"></p><p>在狂按对应的按键之后，应该进入一个长这样的界面。<br><img src="/images/Arch-Linux-Installation/boot_3.jpg" alt="boot_3"><br>找到你的 U 盘，用键盘的方向键控制，然后按回车就行！</p><p><img src="/images/Arch-Linux-Installation/boot_4.png" alt="boot_4"><br>然后你就会看到这么个东西。这个时候，用键盘上的方向键将光标移动到后面有<code>Copy to RAM</code>的这一行，然后按回车！<br>恭喜你！你现在已经进入 Arch Linux Live CD 了！<br>你的电脑会黑屏一段时间，然后出现一堆文字，这是正常的</p><blockquote><p>如果你的电脑内存小于 4GB,请不要选择这个选项，直接选择默认的选项，按回车即可。另外，<br>如果你的电脑内存小于 4GB，建议把电脑丢了&#x3D; &#x3D;</p></blockquote><h1 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h1><p><img src="/images/Arch-Linux-Installation/main_1.png" alt="main_1"><br>等待一会之后，你应该看到这么一个大黑框。</p><blockquote><p>接下来，你会面对这个大黑框输几十行命令，如果你觉得很难，建议立刻关闭本教程，去安装 Manjaro&#x3D; &#x3D;</p></blockquote><h2 id="改字体"><a href="#改字体" class="headerlink" title="改字体"></a>改字体</h2><p>默认的字体又丑又小，不能忍！<br>输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">setfont /usr/share/kbd/consolefonts/LatGrkCyr-12x22.psfu.gz<br></code></pre></td></tr></table></figure><p>然后，爽！<br><img src="/images/Arch-Linux-Installation/ch_font.png" alt="font"></p><h2 id="联网"><a href="#联网" class="headerlink" title="联网"></a>联网</h2><p>如果你使用有线网络连接，那你应该不需要配置就能够正常使用。<br>如果你使用无线网卡（USB 接口的无线网卡不能用！），请使用<code>iwctl</code>来配置。<br>先输入</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">iwctl</span><br></code></pre></td></tr></table></figure><p>然后会进入一个 iwd 的控制台<br>在这里，输入：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">station wlan0 connect 你们家wifi名称<br></code></pre></td></tr></table></figure><blockquote><p>我建议在输入<code>station</code>之后按<code>Tab</code>自动补全。另外，wifi 名称不可以是<strong>中文！</strong></p></blockquote><p>输入这行命令后，再输入<code>exit</code>，然后就应该又可以看到上文中的红色的终端了</p><p>做完这步，可以通过<code>ping baidu.com</code>来测试是否连上了网。如果一切正常，输出应该像这样：<br><img src="/images/Arch-Linux-Installation/ping.png" alt="ping"><br>你可以<code>ctrl+c</code>强行停止。注意，对于任何 Linux 的进程来说，都可以用<code>ctrl+c</code>来强制停止。</p><h2 id="挂载分区"><a href="#挂载分区" class="headerlink" title="挂载分区"></a>挂载分区</h2><p>首先，你应该早在 Windows 上就分好了区。</p><p>Linux 的文件结构和 Windows 上的文件结构是完全不一样的。在 Linux 当中，根目录（<code>/</code>），就是整个系统的放置的地点。所以，和 windows 不同，linux 下一切的文件和分区都可以看作文件夹和文件。这些<code>文件夹</code>，都需要挂载在根目录下。<br>比如说，<code>mnt</code>，他的完整路径就应该是<code>/mnt</code></p><blockquote><p>简单的例子，你有一个衣架，那么衣架就是根目录，你在衣架上挂了一件衣服，挂在了衣架的最上方，这件衣服就是硬盘的分区，挂载点就是<code>衣架上方</code>，衣服的路径应该是<code>衣架/上方</code></p></blockquote><p>首先，输入<code>lsblk</code>查看你的硬盘分区。在我的电脑上，我的硬盘分区大概长这样：<br><img src="/images/Arch-Linux-Installation/block.png" alt="block"><br>可以看到，我的电脑连接了三块硬盘，但是我们只需要<code>sda</code>这一块。</p><blockquote><p>在你的电脑上，<code>sda</code>可能不叫<code>sda</code>，可能是<code>sdb</code>或者是<code>nvme0n1</code>，不用在意。你自己 happy 就行</p></blockquote><p>首先，先格式化你的分区为<code>ext4</code>格式。这是 Linux 下最流行的一个文件系统。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkfs.ext4 /dev/sda1<br></code></pre></td></tr></table></figure><p>然后，挂载这个分区到&#x2F;mnt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mount /dev/sda1 /mnt<br></code></pre></td></tr></table></figure><blockquote><p><code>/dev/sda1</code>可以是你需要的分区。你可以通过<code>lsblk</code>并且通过查看分区大小来确定你需要安装在哪个分区上</p></blockquote><p>在挂载好&#x2F;mnt 分区后，你还需要挂载上 efi 分区。如果你已经装上了 windows 系统，那么 windows 会自动帮你分出一块 100MB 的 EFI 分区。你可以通过<code>lsblk</code>的结果来确定是哪一块。<br>假设这 EFI 分区是<code>/dev/sda2</code>,那么输入：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir <span class="hljs-regexp">/mnt/</span>boot<br>mount <span class="hljs-regexp">/dev/</span>sda2 <span class="hljs-regexp">/mnt/</span>boot<br></code></pre></td></tr></table></figure><blockquote><p>挂载硬盘的顺序不能乱！必须先挂载<code>/mnt</code>再挂载<code>/mnt/boot</code></p></blockquote><p>正确的输出应该如下：<br><img src="/images/Arch-Linux-Installation/mount.png" alt="mount"></p><p>完成这一切后，再次输入<code>lsblk</code>来查看磁盘各个分区的挂载点是否正常</p><p><img src="/images/Arch-Linux-Installation/mount_fin.png" alt="mount_fin"><br>可以看到，现在在右侧的<code>mountpoints</code>一栏已经出现了<code>/mnt</code>和<code>/mnt/boot</code></p><p>Done!</p><h2 id="安装软件包"><a href="#安装软件包" class="headerlink" title="安装软件包"></a>安装软件包</h2><p>在完成上述的操作之后，你就应该开始安装软件包了。首先，要介绍一个重要的概念<code>包管理器(Package Manager)</code>。<code>Linux</code>下，万物皆包。小到字体，图标，大到系统内核，都是以包的形式呈现的。<code>包管理器</code>可以帮助用户解决包的安装，卸载，管理等操作。各个<code>Linux发行版</code>的包管理器各不相同，包的后缀也不同。<code>Arch Linux</code>的包管理器叫<code>pacman</code>(同吃豆人游戏)。</p><p>包管理器负责从<code>软件仓库</code>下载包，并对其进行安装，卸载等操作。不同的包之间存在依赖，冲突的关系，包管理器就负责对这些特殊情况进行处理。具体可以查看<a href="https://wiki.archlinux.org/title/Pacman_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">Arch Wiki 对于 pacman 的介绍</a></p><p>在上文中，我们提到——<code>包管理器从软件仓库下载包</code>，那么，软件仓库的列表被存储在系统中的某个配置文件当中。我们需要通过配置仓库的源的方式来获得更好的体验。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl stop reflector<br><span class="hljs-built_in">echo</span> 随便什么东西 &gt; /etc/pacman.d/mirrorlist<br></code></pre></td></tr></table></figure><p>上述的命令中，我们将系统自行配置的软件源列表都删掉了。现在，我们可以开始自行配置了。<br>你需要使用一个<code>文本编辑器</code>来编辑配置文件。在这里，我推荐使用<code>nano</code>，因为其简洁，门槛低，并且，你现在可以直接使用。当然，你也可以尝试使用<code>vim</code>，如果你觉得你的智商足够高的话 ：）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nano /etc/pacman.d/mirrorlist<br></code></pre></td></tr></table></figure><p>应该长这样:<br><img src="/images/Arch-Linux-Installation/nano_repo.png" alt="nano_repo"></p><p>这里的 hello,就是你刚刚随便输入的东西，不用管他，删掉就可以了。然后，你需要写入:<code>Server=https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch</code></p><blockquote><p>在这里，我选择了<a href="https://mirrors.ustc.edu.cn/">USTC 的镜像源</a></p></blockquote><p><img src="/images/Arch-Linux-Installation/nano_mirror.png" alt="nano_mirror"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Arch Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用GitHub Pages和Hexo搭建免费的博客</title>
    <link href="/2022/07/01/Use-GitHub-Pages-and-Hexo-to-deploy-your-blog-for-free/"/>
    <url>/2022/07/01/Use-GitHub-Pages-and-Hexo-to-deploy-your-blog-for-free/</url>
    
    <content type="html"><![CDATA[<p>用 GitHub Pages 和 Hexo 搭了这个博客网站，遂写篇博客，供后人参考。</p><span id="more"></span><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>GitHub Pages 可以让你把你的网站部署在 GitHub 的服务器上，不用花一分钱。只需要往你的 repo 里面放一个<code>index.html</code>就能轻松搞定啦！</p><h2 id="配置-GitHub-Pages"><a href="#配置-GitHub-Pages" class="headerlink" title="配置 GitHub Pages"></a>配置 GitHub Pages</h2><h3 id="创建-repo"><a href="#创建-repo" class="headerlink" title="创建 repo"></a>创建 repo</h3><p>这一步很简单，我就不详细地写了<del>(主要是懒)</del>。但是要注意，repo 的名称一定要和你的 GitHub 用户名相同，不然的话就无法通过 https:&#x2F;&#x2F;你的用户名.github.io 来访问你的博客而是 https:&#x2F;&#x2F;你的用户名.github.io&#x2F;你的 repo 名称 。并且，一定选上 README，这样可以让你的 repo 自动拥有一个 Main 分支。</p><h3 id="启用-GitHub-Pages"><a href="#启用-GitHub-Pages" class="headerlink" title="启用 GitHub Pages"></a>启用 GitHub Pages</h3><p>在 repo 创建后之后，找到<code>Settings</code>，点进去，再在<code>Code and automation</code>下面找到<code>Pages</code>，进入。或者直接访问<code>https://github.com/你的用户名/你的用户名.github.io/settings/pages</code>来找到 GitHub Pages 的页面。</p><p>看到这样的界面后，在 Source 这一栏下面的按钮，选中 main 这个分支，然后 save,你的 GitHub Pages 就部署好啦！GitHub Pages 部署需要等待几分钟，你可以尝试访问你的 pages,当然，由于我们此时还没有<code>index.md</code>或者<code>index.html</code>，访问肯定是会返回 404 的啦。</p><h2 id="配置-Hexo"><a href="#配置-Hexo" class="headerlink" title="配置 Hexo"></a>配置 Hexo</h2><h3 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h3><ul><li>先把需要的工具列出来，不然不好整～</li></ul><ol><li>Git</li><li>Node.JS<br>关于 Git 的配置，请自行谷歌。接下来的操作都需要用命令行。我个人推荐使用 Linux，当然 Windows 也没问题。<br>然后用这行指令来安装 Hexo：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>Hexo 就安装好啦。</p><h3 id="配置工作环境"><a href="#配置工作环境" class="headerlink" title="配置工作环境"></a>配置工作环境</h3><ol><li>创建一个文件夹，在这里我选择 myblog 为文件夹名。然后<code>hexo init myblog</code>，在进入这个文件夹，<code>npm install</code>。</li><li>稍微等待一会，再输入<code>hexo s</code>，这时用浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a> 就可以看到，我们的博客已经配置好啦！到这里，一般是不会有问题的。如果出现了问题，请再根据我的流程一步步走下来。</li></ol><h3 id="自动上传到-GitHub-上去"><a href="#自动上传到-GitHub-上去" class="headerlink" title="自动上传到 GitHub 上去"></a>自动上传到 GitHub 上去</h3><p>编辑 <code>myblog</code>下的<code>_config.yml</code>,在最后的<code>deploy</code>部分做以下的修改：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br><span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/你的用户名/你的用户名.github.io.git</span><br><span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><blockquote><p>要注意，这时候缺少一个 <code>hexo-deployer-git</code> 模块，我们需要<code>npm install hexo-deployer-git --save</code>来安装它<br>配置好之后，就只需要<code>hexo d -g</code>就能自动将 Markdown 生成为 html，再部署到 GitHub Pages 上去啦！</p></blockquote><h2 id="写博客流程"><a href="#写博客流程" class="headerlink" title="写博客流程"></a>写博客流程</h2><ol><li>进入工作目录后，使用<code>hexo new 你的文件名</code>，就可以在<code>source/_post</code>下创建一个 Markdown 文件，你可以在这里进行写作。</li><li>写作完成后，可以用<code>hexo s</code>来看看有没有问题。确保无误后，就可以直接<code>hexo d -g</code>推送到 GitHub 上去啦！</li></ol><h2 id="高级操作！"><a href="#高级操作！" class="headerlink" title="高级操作！"></a>高级操作！</h2><p><strong><em>施工中</em></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>GitHub Pages</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/07/01/hello-world/"/>
    <url>/2022/07/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Hello,New World!</p><span id="more"></span><p>这是这个博客网站的第一篇博客，也是我人生中的第一篇博客。关于创建这个博客，首先是希望以后能和不懂的人装逼；其次也希望能写些折腾的经历，能供后人参考。Clowwindy 曾经说：</p><blockquote><p>我一直想象的那种大家一起来维护一个项目的景象始终没有出现，也没有出现的迹象。维护这个项目的过程中，遇到 @chenshaoju 这样主动分享的同学并不多。很多来汇报问题的人是以一种小白求大大解决问题，解决完就走人的方式来的，然而既不愿提供足够的信息，也不愿写一些自己尝试的过程供后人参考。互帮互助的气氛就是搞不起来。对比下国外的社区差好远。</p></blockquote><p>看到这些文字，心情复杂。Clowwindy 的愿景什么时候才能在国内出现？只要每个人都向这个方向努力，共享和尊重知识产权的氛围才能慢慢形成。生产力在发展，相信我们可以突破这层桎梏的。抱怨世界的同时，我们自己就是改变的希望。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
